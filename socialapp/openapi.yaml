openapi: 3.0.0
info:
  version: "1.0.0"
  title: "Socialapp"
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  description: Socialapp is a generic social network.
  contact:
    name: "Socialapp"
    url: "https://microservices.onrender.com"
    email: "ignacio.gomez.arboleda@gmail.com"
servers:
  - url: https://microservices.onrender.com
  - url: http://localhost:8080
  - url: http://localhost:8085

tags:
  - name: User
    description: User management
  - name: Comment
    description: Comment management
  - name: Authentication
    description: Authentication management
  - name: Following
    description: Following management

paths:
  /users:
    get:
      summary: "List users"
      description: "List all users in the system (paginated)"
      operationId: listUsers
      security:
        - OAuth2: [readUsers]
      tags:
        - User
      parameters:
        - name: limit
          in: query
          description: "Maximum number of users to return"
          required: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: offset
          in: query
          description: "Pagination offset"
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        "200":
          description: List of all the users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create user
      description: Create a new user in the system
      operationId: createUser
      tags:
        - User
      security:
        - OAuth2: [writeUsers]
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
        required: true
      responses:
        "200":
          description: User was created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /password:
    post:
      summary: Change password
      operationId: changePassword
      description: Change the password of the current user
      tags:
        - User
      security:
        - OAuth2: [writeUsers]
      requestBody:
        description: Change password request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
        required: true
      responses:
        "200":
          description: Password was changed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Reset password
      operationId: resetPassword
      description: Reset the password of a user
      tags:
        - User
      security:
        - OAuth2: [writeUsers]
      requestBody:
        description: Reset password
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
        required: true
      responses:
        "200":
          description: Password was reset successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{username}/feed:
    get:
      summary: Returns a users feed
      description: Returns a users feed
      operationId: getUserFeed
      tags:
        - Comment
      parameters:
        - name: username
          in: path
          description: The username of the user
          required: true
          schema:
            type: string
          example: "johndoe"
      responses:
        "200":
          description: Get a users feed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{username}/comments:
    get:
      summary: Gets all comments for a user
      description: Gets all comments for a user
      operationId: getUserComments
      tags:
        - User
        - Comment
      parameters:
        - name: username
          in: path
          description: username of the user
          required: true
          schema:
            type: string
          example: "johndoe"
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
          example: 20
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result set
          required: false
          schema:
            type: integer
            format: int32
          example: 0
      responses:
        "200":
          description: User comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{username}/followers:
    get:
      summary: Get all followers for a user
      description: Get all followers for a user
      operationId: getUserFollowers
      tags:
        - User
        - Following
      parameters:
        - name: username
          in: path
          description: username of the user
          required: true
          schema:
            type: string
          example: "johndoe"
      responses:
        "200":
          description: User followers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{username}/following:
    get:
      summary: Get all followed users for a user
      description: Get all followed users for a user (users that the user is following)
      operationId: getFollowingUsers
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: username of the user
          required: true
          schema:
            type: string
          example: "johndoe"
      responses:
        "200":
          description: Followed users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{followedUsername}/followers/{followerUsername}:
    post:
      summary: Add a user as a follower
      description: Add a user as a follower of another user
      operationId: followUser
      tags:
        - User
      parameters:
        - name: followedUsername
          in: path
          description: username of the user
          required: true
          schema:
            type: string
          example: "johndoe"
        - name: followerUsername
          in: path
          description: username of the follower
          required: true
          schema:
            type: string
          example: "jackdoe"
      responses:
        "200":
          description: User was followed successfully
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Remove a user as a follower
      description: Remove a user as a follower of another user
      operationId: unfollowUser
      tags:
        - User
      parameters:
        - name: followedUsername
          in: path
          description: username of the user
          required: true
          schema:
            type: string
          example: "johndoe"
        - name: followerUsername
          in: path
          description: username of the follower
          required: true
          schema:
            type: string
          example: "jackdoe"
      responses:
        "200":
          description: User was unfollowed successfully
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{username}:
    delete:
      summary: Deletes a particular user
      description: Deletes a particular user by username
      operationId: deleteUser
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: username of the user
          required: true
          schema:
            type: string
          example: "johndoe"
      responses:
        "200":
          description: User was deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Username not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Get a particular user by username
      description: Get a particular user by username
      operationId: getUserByUsername
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: username of the user
          required: true
          schema:
            type: string
          example: "johndoe"
      responses:
        "200":
          description: Details about a user by ID
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a user
      description: Update a user by username
      operationId: updateUser
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: username of the user
          required: true
          schema:
            type: string
          example: "johndoe"
      requestBody:
        description: Update a user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User was updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /comments/{id}:
    get:
      summary: Returns details about a particular comment
      description: Returns details about a particular comment
      operationId: getComment
      tags:
        - Comment
      parameters:
        - name: id
          in: path
          description: ID of the comment
          required: true
          schema:
            type: integer
            format: int32
          example: 123
      responses:
        "200":
          description: Details about a comment by ID
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /comments:
    post:
      summary: Create a new comment
      description: Create a new comment
      operationId: createComment
      tags:
        - Comment
      requestBody:
        description: Create a new comment
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
        required: true
      responses:
        "200":
          description: New comment was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /oauth/token:
    post:
      summary: "Get an access token"
      description: "Get an access token"
      operationId: getAccessToken
      tags:
        - Authentication
      security:
        - BasicAuth: []
      responses:
        "200":
          description: Access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessToken"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    CreateUserRequest:
      type: object
      required:
        - username
        - first_name
        - last_name
        - email
        - password
      example:
        username: "johndoe"
        first_name: "John"
        last_name: "Doe"
        password: "Secure123!"
        email: "johndoe@mail.com"
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
    User:
      type: object
      required:
        - username
        - first_name
        - last_name
        - email
      example:
        username: "johndoe"
        first_name: "John"
        last_name: "Doe"
        email: "johndoe@mail.com"
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time

    Comment:
      type: object
      required:
        - content
        - username
      example:
        content: "This is a comment"
        username: "johndoe"
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
        like_count:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        username:
          type: string

    AccessToken:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
      example:
        access_token: 123token123
        token_type: "Bearer"
        expires_in: "2022-09-24T21:34:55.498516+02:00"
      properties:
        access_token:
          type: string
        token_type:
          type: string
        scopes:
          type: array
          items:
            type: string
        expires_in:
          type: string
          format: date-time

    Error:
      type: object
      required:
        - code
        - message
      example:
        code: 404
        message: "Not found"
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    ChangePasswordRequest:
      type: object
      required:
        - old_password
        - new_password
      example:
        old_password: "Secure123!"
        new_password: "Secure1234!"
      properties:
        old_password:
          type: string
        new_password:
          type: string
    ResetPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
      example:
        email: "jhon@doe.com"
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /oauth/token
          scopes:
            write: modify your data in your account
            read: read your data

security:
  - BasicAuth: []
  - BearerAuth: []
  - OAuth2:
      - write
      - read
