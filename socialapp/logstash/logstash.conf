input {
	beats {
		port => 5044
	}

	tcp {
		id => "tcplogs"
		port => 50000
		codec => json
		type => "logs"
		tags => ["logs"]
	}
	udp {
		id => "udplogs"
		port => 50000
		codec => json
		type => "logs"
		tags => ["logs"]
	}

	udp {
		id => "udpagroprice"
		port => 50001
		codec => json
		type => "agroprice"
		tags => ["agroprice"]
	}


	tcp {
		id => "tcpagroprice"
		port => 50001
		codec => json
		type => "agroprice"
		tags => ["agroprice"]
	}

	syslog {
		id => "syslog"
		port => 51000
		type => "logs"
		tags => ["syslog"]
	}

	jdbc {
        jdbc_connection_string => "jdbc:postgresql://database:5432/puttyknife"
        jdbc_user => "postgres"
        jdbc_password => "password"
		jdbc_driver_class => "org.postgresql.Driver"
        schedule => "0 * * * *" # cronjob schedule format (see "Helpful Links")
		# https://stackoverflow.com/questions/3928575/postgresql-checking-date-relative-to-today
        statement => "SELECT * FROM public.properties where last_seen_at > current_date - interval '3 day'" # the PG command for retrieving the documents IMPORTANT: no semicolon!

		jdbc_paging_enabled => "true"
        jdbc_page_size => "30000"
		type => "properties"
    }
}

## Add your filters / logstash plugins configuration here
filter {
	# check if latitude exists
	if [type] == "properties" and [latitud] and [longitud] {
		mutate {
			add_field => {"location" => ["%{[latitud]},%{[longitud]}"]}
		}
	}
}

output {

	if [type] == "logs" {
		# turned off due to disk usage in the cluster
		# elasticsearch {
		# 	hosts => ["http://elasticsearch:9200"]
		# 	user => "logstash_internal"
		# 	password => "${LOGSTASH_INTERNAL_PASSWORD}"
		# 	index => "logs-%{+YYYY.MM.dd}"
		# 	document_type => "logs"
		# 	ecs_compatibility => "disabled"
		# }

		opensearch{
			hosts => ["${OPENSEARCH_URL}"]
			user => "${OPENSEARCH_USER}"
			password => "${OPENSEARCH_PASSWORD}"
		}
	}

	if [type] == "properties" {
		elasticsearch {
			hosts => ["http://elasticsearch:9200"]
			user => "logstash_internal"
			password => "${LOGSTASH_INTERNAL_PASSWORD}"
			index => "properties"
			document_id => "%{[id]}"
			doc_as_upsert => true # upserts documents (e.g. if the document does not exist, creates a new record)
			ecs_compatibility => "disabled"
		}
	}
}
