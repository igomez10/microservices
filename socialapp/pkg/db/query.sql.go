// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package db

import (
	"context"
)

const CreateComment = `-- name: CreateComment :one
INSERT INTO comments (
  user_id, content, like_count
) VALUES (
  $1, $2, $3
)
RETURNING id, content, like_count, created_at, user_id, deleted_at
`

type CreateCommentParams struct {
	UserID    int32
	Content   string
	LikeCount int32
}

func (q *Queries) CreateComment(ctx context.Context, db DBTX, arg CreateCommentParams) (Comment, error) {
	row := db.QueryRowContext(ctx, CreateComment, arg.UserID, arg.Content, arg.LikeCount)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.LikeCount,
		&i.CreatedAt,
		&i.UserID,
		&i.DeletedAt,
	)
	return i, err
}

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (
  first_name, last_name, email
) VALUES (
  $1, $2, $3
)
RETURNING id, first_name, last_name, email, created_at, deleted_at
`

type CreateUserParams struct {
	FirstName string
	LastName  string
	Email     string
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) (User, error) {
	row := db.QueryRowContext(ctx, CreateUser, arg.FirstName, arg.LastName, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const DeleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteUser(ctx context.Context, db DBTX, id int32) error {
	_, err := db.ExecContext(ctx, DeleteUser, id)
	return err
}

const GetComment = `-- name: GetComment :one
SELECT id, content, like_count, created_at, user_id, deleted_at FROM comments

WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, db DBTX, id int32) (Comment, error) {
	row := db.QueryRowContext(ctx, GetComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.LikeCount,
		&i.CreatedAt,
		&i.UserID,
		&i.DeletedAt,
	)
	return i, err
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email, created_at, deleted_at FROM users
WHERE email = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, db DBTX, email string) (User, error) {
	row := db.QueryRowContext(ctx, GetUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const GetUserByID = `-- name: GetUserByID :one
SELECT id, first_name, last_name, email, created_at, deleted_at FROM users
WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, db DBTX, id int32) (User, error) {
	row := db.QueryRowContext(ctx, GetUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const ListComment = `-- name: ListComment :many
SELECT id, content, like_count, created_at, user_id, deleted_at FROM comments
WHERE deleted_at IS NULL
ORDER BY name
`

func (q *Queries) ListComment(ctx context.Context, db DBTX) ([]Comment, error) {
	rows, err := db.QueryContext(ctx, ListComment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.LikeCount,
			&i.CreatedAt,
			&i.UserID,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListUsers = `-- name: ListUsers :many
SELECT id, first_name, last_name, email, created_at, deleted_at FROM users
WHERE deleted_at IS NULL
ORDER BY first_name
`

func (q *Queries) ListUsers(ctx context.Context, db DBTX) ([]User, error) {
	rows, err := db.QueryContext(ctx, ListUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
