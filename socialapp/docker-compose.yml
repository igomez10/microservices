version: "3.7"

networks:
  elk:
    name: docker-elk_elk

volumes:
  prometheus_data: {}
  grafana_data: {}
  db_data: {}
  kafka-data1: {}
  kafka-data2: {}
  kafka-data3: {}
  portainer_data: {}
  # phlare_data: {}

services:

  socialapp:
    deploy:
      replicas: 3
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - elk
      - default
    command:
      - "/main"
      - "--port=8086"
      - "--propertiesSubdomain=${PROPERTIES_SUBDOMAIN}"
      - "--urlServiceHost=urlshortener:8089"
      - "--agentURL=alloy:4317"
      - "--urlShortenerSubdomain=${URL_SHORTENER}"
      - "--socialappSubdomain=${SOCIALAPP_SUBDOMAIN}"
    volumes:
      - ./openapi.yaml:/openapi.yaml
    environment:
      DATABASE_URL: postgres://postgres:password@database:5432/socialapp?sslmode=disable
      REDIS_URL: redis://redis:6379
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.socialapp.entrypoints=web"
      - "traefik.http.routers.socialapp.rule=Host(`socialapp.${EXPOSED_HOST}`)"
      - "traefik.http.services.socialapp.loadbalancer.server.port=8086"
    depends_on:
      - database
    cpus: 0.5
    mem_limit: 512m
    logging:
      driver: "syslog"
      options:
        syslog-address: "udp://localhost:53000"
        tag: "socialapp"

  database:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: socialapp
    command:
      - postgres
      - -c
      - wal_level=logical
    volumes:
      - ./db/setup:/docker-entrypoint-initdb.d
      - ${DATABASE_DATA_DIR:-db_data}:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    logging:
      driver: "syslog"
      options:
        syslog-address: "udp://localhost:53000"
        tag: "database"
    cpus: 2
    mem_limit: 2g

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:password@database:5432/postgres?sslmode=disable"
    ports:
      - 9187:9187
    restart: unless-stopped
    logging:
      driver: "syslog"
      options:
        syslog-address: "udp://localhost:53000"
        tag: "postgres-exporter"
    cpus: 0.5
    mem_limit: 512m

  grafana:
    image: grafana/grafana:11.2.0
    user: "472"
    ports:
      - 3005:3000
    environment:
      - GF_FEATURE_TOGGLES_ENABLE=flameGraph
      - POSTGRESQL_PROPERTIES_PASSWORD=${POSTGRESQL_PROPERTIES_PASSWORD}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - GITHUB_ACCESSTOKEN=${GITHUB_ACCESSTOKEN}
      - GF_INSTALL_PLUGINS=redis-app
      - GF_INSTALL_PLUGINS=redis-explorer-app
    expose:
      - 3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 5s
      timeout: 5s
      retries: 5
    cpus: 0.5
    mem_limit: 512m
    logging:
      driver: "syslog"
      options:
        syslog-address: "udp://localhost:53000"
        tag: "grafana"

  prometheus:
    image: prom/prometheus:v2.50.1
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - "--storage.tsdb.retention.size=6GB"
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - 9090:9090
    expose:
      - 9090
    restart: always
    logging:
      driver: "syslog"
      options:
        syslog-address: "udp://localhost:53000"
        tag: "prometheus"

  alertmanager:
    image: prom/alertmanager:latest
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
    ports:
      - 9093:9093
    expose:
      - 9093
    restart: always
    cpus: 2
    mem_limit: 2g
    logging:
      driver: "syslog"
      options:
        syslog-address: "udp://localhost:53000"
        tag: "alertmanager"

  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: node-exporter
    privileged: true
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc:/host/etc:ro
      - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
      # enable process collector
      - "--collector.processes"
      #  enable systemd collector
      - "--collector.systemd"
    expose:
      - 9100
    ports:
      - 9100:9100
    cpus: 1
    mem_limit: 2048m
    logging:
      driver: "syslog"
      options:
        syslog-address: "udp://localhost:53000"
        tag: "node-exporter"

  inspector:
    image: ubuntu:latest
    command: sleep infinity
    ports:
      - 1243:1243
    logging:
      driver: "syslog"
      options:
        syslog-address: "udp://localhost:53000"
        tag: "inspector"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: monitoring_cadvisor
    privileged: true
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    command:
      - "--docker_only=true"
      - "--housekeeping_interval=10s"
    expose:
      - 8080
    ports:
      - 8080:8080
    cpus: 2
    mem_limit: 4096m
    logging:
      driver: "syslog"
      options:
        syslog-address: "udp://localhost:53000"
        tag: "cadvisor"

  broker1:
    image: confluentinc/cp-kafka:latest
    container_name: broker1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://:9092,KRAFT://:9097,PLAINTEXT_HOST://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,KRAFT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: KRAFT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker1:9097,2@broker2:9098,3@broker3:9099
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      CLUSTER_ID: "yFMG3uNHSAKhz-zUrBIhjg"
    volumes:
      - ${BROKER_DATA_DIR}:/var/lib/kafka/data
    cpus: 2
    mem_limit: 4096m
    logging:
      driver: "syslog"
      options:
        syslog-address: "udp://localhost:53000"
        tag: "broker1"

  broker2:
    image: confluentinc/cp-kafka:latest
    container_name: broker2
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_LISTENERS: PLAINTEXT://:9092,KRAFT://:9098,PLAINTEXT_HOST://:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:9092,PLAINTEXT_HOST://localhost:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,KRAFT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: KRAFT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker1:9097,2@broker2:9098,3@broker3:9099
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      CLUSTER_ID: "yFMG3uNHSAKhz-zUrBIhjg"
    volumes:
      - ${BROKER2_DATA_DIR}:/var/lib/kafka/data
    ports:
      - "29093:29093"
    cpus: 2
    mem_limit: 4096m
    logging:
      driver: "syslog"
      options:
        syslog-address: "udp://localhost:53000"
        tag: "broker2"

  broker3:
    image: confluentinc/cp-kafka:latest
    container_name: broker3
    ports:
      - "29094:29094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_LISTENERS: PLAINTEXT://:9092,KRAFT://:9099,PLAINTEXT_HOST://:29094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker3:9092,PLAINTEXT_HOST://localhost:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,KRAFT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: KRAFT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker1:9097,2@broker2:9098,3@broker3:9099
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      CLUSTER_ID: "yFMG3uNHSAKhz-zUrBIhjg"
    volumes:
      - ${BROKER3_DATA_DIR}:/var/lib/kafka/data
    cpus: 2
    mem_limit: 4096m
    logging:
      driver: "syslog"
      options:
        syslog-address: "udp://localhost:53000"
        tag: "broker3"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker1:9092,broker2:9092,broker3:9092
    depends_on:
      - broker1
      - broker2
      - broker3
    cpus: 0.5
    mem_limit: 512m
    logging:
      driver: "syslog"
      options:
        syslog-address: "udp://localhost:53000"
        tag: "kafka-ui"

  integration-tests-1:
    build:
      context: .
      dockerfile: Integration.Dockerfile
    ports:
      - "45678:45678"
    environment:
      "ADD_TEST_JITTER": 1,
      "TEST_SETUP": ${TEST_SETUP},
      "AGENT_URL": "http://tempo:4317"
    restart: "unless-stopped"
    cpus: 0.5
    mem_limit: 512m
    logging:
      driver: "syslog"
      options:
        syslog-address: "udp://localhost:53000"
        tag: "integration-tests"

  integration-tests-2:
    build:
      context: .
      dockerfile: Integration.Dockerfile
    ports:
      - "45679:45679"
    environment:
      "ADD_TEST_JITTER": 1,
      "TEST_SETUP": ${TEST_SETUP},
      "AGENT_URL": "http://tempo:4317"
    restart: "unless-stopped"
    cpus: 0.5
    mem_limit: 512m
    logging:
      driver: "syslog"
      options:
        syslog-address: "udp://localhost:53000"
        tag: "integration-tests"

  # newrelic:
  #   build:
  #     context: ./newrelic
  #   container_name: newrelic
  #   volumes:
  #     - "/:/host:ro"
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  #   cap_add:
  #     - SYS_PTRACE
  #   network_mode: host
  #   pid: host
  #   privileged: true
  #   environment:
  #     # set host name
  #     - NRIA_DISPLAY_NAME=ocivm
  #     - NRIA_OVERRIDE_HOSTNAME_SHORT=true
  #     - NRIA_LICENSE_KEY=${NEW_RELIC_LICENSE}
  #     - NEW_RELIC_LOG=stdout
  #     - NEW_RELIC_LOG_LEVEL=info

  elasticsearch-exporter:
    image: quay.io/prometheuscommunity/elasticsearch-exporter:latest
    environment:
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
    command:
      - "--es.uri=http://${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}@elasticsearch:9200"
    restart: always
    networks:
      - elk
      - default
    depends_on:
      - prometheus
    ports:
      - "9114:9114"
    cpus: 0.5
    mem_limit: 512m

  debezium:
    image: quay.io/debezium/connect:2.3
    ports:
      - 8083:8083
    environment:
      - BOOTSTRAP_SERVERS=broker1:9092,broker2:9092,broker3:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=debezium_storage_config
      - OFFSET_STORAGE_TOPIC=debezium_storage_offsets
      - STATUS_STORAGE_TOPIC=debezium_storage_status
    volumes:
      - ./debezium/plugins:/kafka/connect/plugins
      - ./debezium/config:/kafka/connect/config
    depends_on:
      - broker1
      - broker2
      - broker3
      - database
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083" ]
      interval: 5s
      timeout: 5s
      retries: 5
    cpus: 2
    mem_limit: 4096m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        tag: "debezium"

  # debezium-ui:
  #   image: debezium/debezium-ui:latest
  #   container_name: debezium-ui
  #   ports:
  #     - "8084:8080"
  #   environment:
  #     - KAFKA_CONNECT_URIS=http://debezium:8083
  #   depends_on:
  #     - debezium
  #   restart: always
  #   healthcheck:
  #     test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5
  #   cpus: 1
  #   mem_limit: 1024m
  #   logging:
  #     driver: "syslog"
  #     options:
  #       syslog-address: "udp://localhost:53000"
  #       tag: "debezium-ui"
  unleash:
    image: unleashorg/unleash-server:5
    ports:
      - "4242:4242"
    environment:
      # This points Unleash to its backing database (defined in the `db` section below)
      DATABASE_URL: "postgresql://postgres:password@database:5432/unleash"
      # Disable SSL for database connections. @chriswk: why do we do this?
      DATABASE_SSL: "false"
      # Changing log levels:
      LOG_LEVEL: "warn"
    depends_on:
      database:
        condition: service_healthy
    command: [ "node", "index.js" ]
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:4242/health || exit 1
      interval: 1s
      timeout: 1m
      retries: 5
      start_period: 15s

  tempo:
    image: grafana/tempo:2.6.0
    ports:
      - "3200:3200"
      - "4317:4317"
      - "4318:4318"
      - "9411:9411"
      - "55680:55680"
      - "55681:55681"
      - "14250:14250"
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - "./tempo/tempo.yaml:/etc/tempo.yaml"
    restart: unless-stopped
    cpus: 2
    mem_limit: 4096m
    logging:
      driver: syslog
      options:
        syslog-address: "udp://localhost:53000"
        tag: "tempo"

  alloy:
    image: grafana/alloy:v1.3.0
    ports:
      - "12347:12345"
      - "12348:12348"
      - "6832:6832"
      - "55679:55679"
      - "51893:51893/udp"
      - "51893:51893/tcp"
      - "3100:3100"
    volumes:
      - "./alloy/config.alloy:/etc/alloy/config.alloy"
      - "./alloy/endpoints.json:/etc/alloy/endpoints.json"
    command:
      - "run"
      - "--server.http.listen-addr=0.0.0.0:12345"
      - "--stability.level=public-preview"
      - "/etc/alloy/config.alloy"
    logging:
      driver: syslog
      options:
        syslog-address: "udp://localhost:53000"
        tag: "alloy"

  pyroscope:
    image: grafana/pyroscope:1.6.1
    environment:
      JAEGER_AGENT_HOST: tempo
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    command: [ "-config.file=/etc/pyroscope.yml" ]
    ports:
      - "4040:4040"
    volumes:
      - ./pyroscope/pyroscope.yml:/etc/pyroscope.yml
    restart: unless-stopped
    logging:
      driver: syslog
      options:
        syslog-address: "udp://localhost:53000"
        tag: "pyroscope"

  mimir:
    image: grafana/mimir:2.13.0
    command:
      - "-ingester.native-histograms-ingestion-enabled=true"
      - "-config.file=/etc/mimir.yaml"
      - "-ingester.max-global-series-per-user=2500000"
    ports:
      - "9009:9009"
    cpus: 2
    mem_limit: 4096m
    volumes:
      - "./mimir/mimir.yaml:/etc/mimir.yaml"
    restart: unless-stopped
    logging:
      driver: syslog
      options:
        syslog-address: "udp://localhost:53000"
        tag: "mimir"

  loki:
    image: grafana/loki:2.9.4
    restart: unless-stopped

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    ports:
      - "9000:9000"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer_data:/data"
    cpus: 0.5
    mem_limit: 512m
    restart: always
    logging:
      driver: syslog
      options:
        syslog-address: "udp://localhost:53000"
        tag: "portainer"

  traefik:
    image: traefik:v3.1.4
    ports:
      - "80:80"
      - "443:443"
      - "8087:8080"
      - "11111:11111"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./letsencrypt:/letsencrypt"
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml"
    cpus: 1
    mem_limit: 1024m
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${EXPOSED_HOST}`)"
      - "traefik.http.routers.traefik.entrypoints=weblocal"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    logging:
      driver: syslog
      options:
        syslog-address: "udp://localhost:53000"
        tag: "traefik"

  redis:
    image: redis:6.2.6
    cpus: 0.5
    mem_limit: 512m
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis.entrypoints=weblocal"
      - "traefik.http.routers.redis.rule=Host(`redis.${EXPOSED_HOST}`)"
      - "traefik.http.services.redis.loadbalancer.server.port=6379"
    logging:
      driver: syslog
      options:
        syslog-address: "udp://localhost:53000"
        tag: "redis"

  whoamiinternal:
    image: traefik/whoami
    labels:
      - "traefik.http.routers.whoamiinternal.rule=Host(`whoami.internal.${EXPOSED_HOST}`)"
      - "traefik.http.services.whoamiinternal.loadbalancer.server.port=80"
      - "traefik.http.routers.whoamiinternal.entrypoints=websecure"
      - "traefik.enable=true"
    cpus: 0.5
    mem_limit: 512m
    logging:
      driver: syslog
      options:
        syslog-address: "udp://localhost:53000"
        tag: "whoamiinternal"

  whoami:
    image: traefik/whoami
    labels:
      - "traefik.http.routers.whoami.rule=Host(`whoami.${EXPOSED_HOST}`)"
      - "traefik.http.services.whoami.loadbalancer.server.port=80"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.enable=true"
    cpus: 0.5
    mem_limit: 512m
    logging:
      driver: syslog
      options:
        syslog-address: "udp://localhost:53000"
        tag: "whoami"
