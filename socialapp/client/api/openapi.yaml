openapi: 3.0.0
info:
  description: Socialapp is a generic social network.
  license:
    name: MIT
  title: Socialapp
  version: 1.0.0
servers:
- url: https://microservices.onrender.com
- url: http://localhost:8080
- url: http://localhost:8085
security:
- BasicAuth: []
- BearerAuth: []
- OAuth2:
  - readUsers
  - writeUsers
paths:
  /users:
    get:
      operationId: listUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: List of all the users
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      security:
      - OAuth2:
        - readUsers
      summary: Returns all the users
      tags:
      - User
    post:
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        description: Create a new user
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User was created successfully
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      security:
      - OAuth2:
        - writeUsers
      summary: Create a new user
      tags:
      - User
  /password:
    post:
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        description: Change password
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Password was changed successfully
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      security:
      - OAuth2:
        - writeUsers
      summary: Change password
      tags:
      - User
    put:
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        description: Reset password
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Password was reset successfully
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      security:
      - OAuth2:
        - writeUsers
      summary: Reset password
      tags:
      - User
  /users/{username}/feed:
    get:
      operationId: getUserFeed
      parameters:
      - description: The username of the user
        example: johndoe
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
          description: Get a users feed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Returns a users feed
      tags:
      - Comment
  /users/{username}/comments:
    get:
      operationId: getUserComments
      parameters:
      - description: username of the user
        example: johndoe
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
          description: User comments
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Gets all comments for a user
      tags:
      - User
      - Comment
  /users/{username}/followers:
    get:
      operationId: getUserFollowers
      parameters:
      - description: username of the user
        example: johndoe
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: User followers
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get all followers for a user
      tags:
      - User
      - Following
  /users/{username}/following:
    get:
      operationId: getFollowingUsers
      parameters:
      - description: username of the user
        example: johndoe
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Followed users
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get all followed users for a user
      tags:
      - User
  /users/{followedUsername}/followers/{followerUsername}:
    delete:
      operationId: unfollowUser
      parameters:
      - description: username of the user
        example: johndoe
        explode: false
        in: path
        name: followedUsername
        required: true
        schema:
          type: string
        style: simple
      - description: username of the follower
        example: jackdoe
        explode: false
        in: path
        name: followerUsername
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: User was unfollowed successfully
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Remove a user as a follower
      tags:
      - User
    post:
      operationId: followUser
      parameters:
      - description: username of the user
        example: johndoe
        explode: false
        in: path
        name: followedUsername
        required: true
        schema:
          type: string
        style: simple
      - description: username of the follower
        example: jackdoe
        explode: false
        in: path
        name: followerUsername
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: User was followed successfully
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a user as a follower
      tags:
      - User
  /users/{username}:
    delete:
      operationId: deleteUser
      parameters:
      - description: username of the user
        example: johndoe
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User was deleted succesfully
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Username not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Deletes a particular user
      tags:
      - User
    get:
      operationId: getUserByUsername
      parameters:
      - description: username of the user
        example: johndoe
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Details about a user by ID
          headers:
            x-next:
              description: A link to the next page of responses
              explode: false
              schema:
                type: string
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a particular user by username
      tags:
      - User
    put:
      operationId: updateUser
      parameters:
      - description: username of the user
        example: johndoe
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Update a user
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User was updated successfully
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a user
      tags:
      - User
  /comments/{id}:
    get:
      operationId: getComment
      parameters:
      - description: ID of the comment
        example: 123
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: Details about a comment by ID
          headers:
            x-next:
              description: A link to the next page of responses
              explode: false
              schema:
                type: string
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Returns details about a particular comment
      tags:
      - Comment
  /comments:
    post:
      operationId: createComment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        description: Create a new comment
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: New comment was created
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a new comment
      tags:
      - Comment
  /oauth/token:
    post:
      operationId: getAccessToken
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
          description: Access token
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      security:
      - basicAuth: []
      summary: Get an access token
      tags:
      - Authentication
components:
  schemas:
    CreateUserRequest:
      example:
        username: johndoe
        first_name: John
        last_name: Doe
        password: Secure123!
        email: johndoe@mail.com
      properties:
        id:
          format: int64
          type: integer
        username:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        created_at:
          format: date-time
          type: string
      required:
      - email
      - first_name
      - last_name
      - password
      - username
      type: object
    User:
      example:
        username: johndoe
        first_name: John
        last_name: Doe
        email: johndoe@mail.com
      properties:
        id:
          format: int64
          type: integer
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        created_at:
          format: date-time
          type: string
      required:
      - email
      - first_name
      - last_name
      - username
      type: object
    Comment:
      example:
        content: This is a comment
        username: johndoe
      properties:
        id:
          format: int64
          type: integer
        content:
          type: string
        like_count:
          format: int64
          type: integer
        created_at:
          format: date-time
          type: string
        username:
          type: string
      required:
      - content
      - username
      type: object
    AccessToken:
      example:
      - access_token: 123token123
      - token_type: Bearer
      - expires_in: 3600
      properties:
        access_token:
          type: string
        scopes:
          items:
            type: string
          type: array
        expires_at:
          format: date-time
          type: string
      required:
      - access_token
      - expires_in
      - token_type
      type: object
    Error:
      example:
        code: 404
        message: Not found
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
      - code
      - message
      type: object
    ChangePasswordRequest:
      example:
        old_password: Secure123!
        new_password: Secure1234!
      properties:
        old_password:
          type: string
        new_password:
          type: string
      required:
      - new_password
      - old_password
      type: object
    ResetPasswordRequest:
      example:
        email: jhon@doe.com
      properties:
        email:
          type: string
      required:
      - email
      type: object
  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
    BearerAuth:
      scheme: bearer
      type: http
    oauth2:
      flows:
        clientCredentials:
          scopes:
            write: modify your data in your account
            read: read your data
          tokenUrl: localhost:8080/oauth/token
      type: oauth2
