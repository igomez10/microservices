/*
Socialapp

Socialapp is a generic social network.

API version: 1.0.0
Contact: ignacio.gomez.arboleda@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the BasicUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasicUser{}

// BasicUser struct for BasicUser
type BasicUser struct {
	Username  string `json:"username"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

// NewBasicUser instantiates a new BasicUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicUser(username string, firstName string, lastName string, email string) *BasicUser {
	this := BasicUser{}
	this.Username = username
	this.FirstName = firstName
	this.LastName = lastName
	this.Email = email
	return &this
}

// NewBasicUserWithDefaults instantiates a new BasicUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicUserWithDefaults() *BasicUser {
	this := BasicUser{}
	return &this
}

// GetUsername returns the Username field value
func (o *BasicUser) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *BasicUser) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *BasicUser) SetUsername(v string) {
	o.Username = v
}

// GetFirstName returns the FirstName field value
func (o *BasicUser) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *BasicUser) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *BasicUser) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *BasicUser) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *BasicUser) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *BasicUser) SetLastName(v string) {
	o.LastName = v
}

// GetEmail returns the Email field value
func (o *BasicUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *BasicUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *BasicUser) SetEmail(v string) {
	o.Email = v
}

func (o BasicUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BasicUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["first_name"] = o.FirstName
	toSerialize["last_name"] = o.LastName
	toSerialize["email"] = o.Email
	return toSerialize, nil
}

type NullableBasicUser struct {
	value *BasicUser
	isSet bool
}

func (v NullableBasicUser) Get() *BasicUser {
	return v.value
}

func (v *NullableBasicUser) Set(val *BasicUser) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicUser) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicUser(val *BasicUser) *NullableBasicUser {
	return &NullableBasicUser{value: val, isSet: true}
}

func (v NullableBasicUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
