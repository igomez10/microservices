/*
 * Socialapp
 *
 * Socialapp is a generic social network.
 *
 * API version: 1.0.0
 * Contact: ignacio.gomez.arboleda@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// URLAPIController binds http requests to an api service and writes the service results to the http response
type URLAPIController struct {
	service      URLAPIServicer
	errorHandler ErrorHandler
}

// URLAPIOption for how the controller is set up.
type URLAPIOption func(*URLAPIController)

// WithURLAPIErrorHandler inject ErrorHandler into controller
func WithURLAPIErrorHandler(h ErrorHandler) URLAPIOption {
	return func(c *URLAPIController) {
		c.errorHandler = h
	}
}

// NewURLAPIController creates a default api controller
func NewURLAPIController(s URLAPIServicer, opts ...URLAPIOption) Router {
	controller := &URLAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the URLAPIController
func (c *URLAPIController) Routes() Routes {
	return Routes{
		"CreateUrl": Route{
			strings.ToUpper("Post"),
			"/v1/urls",
			c.CreateUrl,
		},
		"DeleteUrl": Route{
			strings.ToUpper("Delete"),
			"/v1/urls/{alias}",
			c.DeleteUrl,
		},
		"GetUrl": Route{
			strings.ToUpper("Get"),
			"/v1/urls/{alias}",
			c.GetUrl,
		},
		"GetUrlData": Route{
			strings.ToUpper("Get"),
			"/v1/urls/{alias}/data",
			c.GetUrlData,
		},
	}
}

// CreateUrl - Create a new url
func (c *URLAPIController) CreateUrl(w http.ResponseWriter, r *http.Request) {
	urlParam := Url{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&urlParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUrlRequired(urlParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUrlConstraints(urlParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateUrl(r.Context(), urlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteUrl - Delete a url
func (c *URLAPIController) DeleteUrl(w http.ResponseWriter, r *http.Request) {
	aliasParam := chi.URLParam(r, "alias")
	if aliasParam == "" {
		c.errorHandler(w, r, &RequiredError{"alias"}, nil)
		return
	}
	result, err := c.service.DeleteUrl(r.Context(), aliasParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUrl - Get a url
func (c *URLAPIController) GetUrl(w http.ResponseWriter, r *http.Request) {
	aliasParam := chi.URLParam(r, "alias")
	if aliasParam == "" {
		c.errorHandler(w, r, &RequiredError{"alias"}, nil)
		return
	}
	result, err := c.service.GetUrl(r.Context(), aliasParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUrlData - Returns a url metadata
func (c *URLAPIController) GetUrlData(w http.ResponseWriter, r *http.Request) {
	aliasParam := chi.URLParam(r, "alias")
	if aliasParam == "" {
		c.errorHandler(w, r, &RequiredError{"alias"}, nil)
		return
	}
	result, err := c.service.GetUrlData(r.Context(), aliasParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
