// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Socialapp
 *
 * Socialapp is a generic social network.
 *
 * API version: 1.0.0
 * Contact: ignacio.gomez.arboleda@gmail.com
 */

package openapi

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// RoleAPIController binds http requests to an api service and writes the service results to the http response
type RoleAPIController struct {
	service      RoleAPIServicer
	errorHandler ErrorHandler
}

// RoleAPIOption for how the controller is set up.
type RoleAPIOption func(*RoleAPIController)

// WithRoleAPIErrorHandler inject ErrorHandler into controller
func WithRoleAPIErrorHandler(h ErrorHandler) RoleAPIOption {
	return func(c *RoleAPIController) {
		c.errorHandler = h
	}
}

// NewRoleAPIController creates a default api controller
func NewRoleAPIController(s RoleAPIServicer, opts ...RoleAPIOption) *RoleAPIController {
	controller := &RoleAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RoleAPIController
func (c *RoleAPIController) Routes() Routes {
	return Routes{
		"AddScopeToRole": Route{
			strings.ToUpper("Post"),
			"/v1/roles/{id}/scopes",
			c.AddScopeToRole,
		},
		"CreateRole": Route{
			strings.ToUpper("Post"),
			"/v1/roles",
			c.CreateRole,
		},
		"DeleteRole": Route{
			strings.ToUpper("Delete"),
			"/v1/roles/{id}",
			c.DeleteRole,
		},
		"GetRole": Route{
			strings.ToUpper("Get"),
			"/v1/roles/{id}",
			c.GetRole,
		},
		"ListRoles": Route{
			strings.ToUpper("Get"),
			"/v1/roles",
			c.ListRoles,
		},
		"ListScopesForRole": Route{
			strings.ToUpper("Get"),
			"/v1/roles/{id}/scopes",
			c.ListScopesForRole,
		},
		"RemoveScopeFromRole": Route{
			strings.ToUpper("Delete"),
			"/v1/roles/{role_id}/scopes/{scope_id}",
			c.RemoveScopeFromRole,
		},
		"UpdateRole": Route{
			strings.ToUpper("Put"),
			"/v1/roles/{id}",
			c.UpdateRole,
		},
	}
}

// AddScopeToRole - Add a scope to a role
func (c *RoleAPIController) AddScopeToRole(w http.ResponseWriter, r *http.Request) {
	idParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "id", Err: err}, nil)
		return
	}
	requestBodyParam := []string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.AddScopeToRole(r.Context(), idParam, requestBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateRole - Create a new role
func (c *RoleAPIController) CreateRole(w http.ResponseWriter, r *http.Request) {
	roleParam := Role{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&roleParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRoleRequired(roleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRoleConstraints(roleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateRole(r.Context(), roleParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteRole - Delete a role
func (c *RoleAPIController) DeleteRole(w http.ResponseWriter, r *http.Request) {
	idParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "id", Err: err}, nil)
		return
	}
	result, err := c.service.DeleteRole(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetRole - Returns a role
func (c *RoleAPIController) GetRole(w http.ResponseWriter, r *http.Request) {
	idParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "id", Err: err}, nil)
		return
	}
	result, err := c.service.GetRole(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListRoles - Returns a list of roles
func (c *RoleAPIController) ListRoles(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](100),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "offset", Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	result, err := c.service.ListRoles(r.Context(), limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListScopesForRole - Returns a list of scopes for a role
func (c *RoleAPIController) ListScopesForRole(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	idParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "id", Err: err}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](100),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "offset", Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	result, err := c.service.ListScopesForRole(r.Context(), idParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// RemoveScopeFromRole - Remove a scope from a role
func (c *RoleAPIController) RemoveScopeFromRole(w http.ResponseWriter, r *http.Request) {
	roleIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "role_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "role_id", Err: err}, nil)
		return
	}
	scopeIdParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "scope_id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "scope_id", Err: err}, nil)
		return
	}
	result, err := c.service.RemoveScopeFromRole(r.Context(), roleIdParam, scopeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateRole - Update a role
func (c *RoleAPIController) UpdateRole(w http.ResponseWriter, r *http.Request) {
	idParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "id", Err: err}, nil)
		return
	}
	roleParam := Role{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&roleParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRoleRequired(roleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRoleConstraints(roleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateRole(r.Context(), idParam, roleParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
