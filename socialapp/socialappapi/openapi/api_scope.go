/*
 * Socialapp
 *
 * Socialapp is a generic social network.
 *
 * API version: 1.0.0
 * Contact: ignacio.gomez.arboleda@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// ScopeAPIController binds http requests to an api service and writes the service results to the http response
type ScopeAPIController struct {
	service      ScopeAPIServicer
	errorHandler ErrorHandler
}

// ScopeAPIOption for how the controller is set up.
type ScopeAPIOption func(*ScopeAPIController)

// WithScopeAPIErrorHandler inject ErrorHandler into controller
func WithScopeAPIErrorHandler(h ErrorHandler) ScopeAPIOption {
	return func(c *ScopeAPIController) {
		c.errorHandler = h
	}
}

// NewScopeAPIController creates a default api controller
func NewScopeAPIController(s ScopeAPIServicer, opts ...ScopeAPIOption) Router {
	controller := &ScopeAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ScopeAPIController
func (c *ScopeAPIController) Routes() Routes {
	return Routes{
		"CreateScope": Route{
			strings.ToUpper("Post"),
			"/v1/scopes",
			c.CreateScope,
		},
		"DeleteScope": Route{
			strings.ToUpper("Delete"),
			"/v1/scopes/{id}",
			c.DeleteScope,
		},
		"GetScope": Route{
			strings.ToUpper("Get"),
			"/v1/scopes/{id}",
			c.GetScope,
		},
		"ListScopes": Route{
			strings.ToUpper("Get"),
			"/v1/scopes",
			c.ListScopes,
		},
		"UpdateScope": Route{
			strings.ToUpper("Put"),
			"/v1/scopes/{id}",
			c.UpdateScope,
		},
	}
}

// CreateScope - Create a new scope
func (c *ScopeAPIController) CreateScope(w http.ResponseWriter, r *http.Request) {
	scopeParam := Scope{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&scopeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertScopeRequired(scopeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertScopeConstraints(scopeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateScope(r.Context(), scopeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteScope - Delete a scope
func (c *ScopeAPIController) DeleteScope(w http.ResponseWriter, r *http.Request) {
	idParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteScope(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetScope - Returns a scope
func (c *ScopeAPIController) GetScope(w http.ResponseWriter, r *http.Request) {
	idParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetScope(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListScopes - Returns a list of scopes
func (c *ScopeAPIController) ListScopes(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](100),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	result, err := c.service.ListScopes(r.Context(), limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateScope - Update a scope
func (c *ScopeAPIController) UpdateScope(w http.ResponseWriter, r *http.Request) {
	idParam, err := parseNumericParameter[int32](
		chi.URLParam(r, "id"),
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	scopeParam := Scope{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&scopeParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertScopeRequired(scopeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertScopeConstraints(scopeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateScope(r.Context(), idParam, scopeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
