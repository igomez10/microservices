/*
 * Socialapp
 *
 * Socialapp is a generic social network.
 *
 * API version: 1.0.0
 * Contact: ignacio.gomez.arboleda@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// ScopeApiController binds http requests to an api service and writes the service results to the http response
type ScopeApiController struct {
	service      ScopeApiServicer
	errorHandler ErrorHandler
}

// ScopeApiOption for how the controller is set up.
type ScopeApiOption func(*ScopeApiController)

// WithScopeApiErrorHandler inject ErrorHandler into controller
func WithScopeApiErrorHandler(h ErrorHandler) ScopeApiOption {
	return func(c *ScopeApiController) {
		c.errorHandler = h
	}
}

// NewScopeApiController creates a default api controller
func NewScopeApiController(s ScopeApiServicer, opts ...ScopeApiOption) Router {
	controller := &ScopeApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ScopeApiController
func (c *ScopeApiController) Routes() Routes {
	return Routes{
		{
			"CreateScope",
			strings.ToUpper("Post"),
			"/scopes",
			c.CreateScope,
		},
		{
			"DeleteScope",
			strings.ToUpper("Delete"),
			"/scopes/{id}",
			c.DeleteScope,
		},
		{
			"GetScope",
			strings.ToUpper("Get"),
			"/scopes/{id}",
			c.GetScope,
		},
		{
			"ListScopes",
			strings.ToUpper("Get"),
			"/scopes",
			c.ListScopes,
		},
		{
			"UpdateScope",
			strings.ToUpper("Put"),
			"/scopes/{id}",
			c.UpdateScope,
		},
	}
}

// CreateScope - Create a new scope
func (c *ScopeApiController) CreateScope(w http.ResponseWriter, r *http.Request) {
	scopeParam := Scope{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&scopeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertScopeRequired(scopeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateScope(r.Context(), scopeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteScope - Delete a scope
func (c *ScopeApiController) DeleteScope(w http.ResponseWriter, r *http.Request) {
	idParam, err := parseInt32Parameter(chi.URLParam(r, "id"), true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.DeleteScope(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetScope - Returns a scope
func (c *ScopeApiController) GetScope(w http.ResponseWriter, r *http.Request) {
	idParam, err := parseInt32Parameter(chi.URLParam(r, "id"), true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetScope(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListScopes - Returns a list of scopes
func (c *ScopeApiController) ListScopes(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	limitParam, err := parseInt32Parameter(query.Get("limit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	offsetParam, err := parseInt32Parameter(query.Get("offset"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListScopes(r.Context(), limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateScope - Update a scope
func (c *ScopeApiController) UpdateScope(w http.ResponseWriter, r *http.Request) {
	idParam, err := parseInt32Parameter(chi.URLParam(r, "id"), true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	scopeParam := Scope{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&scopeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertScopeRequired(scopeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateScope(r.Context(), idParam, scopeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
