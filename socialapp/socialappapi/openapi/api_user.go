// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Socialapp
 *
 * Socialapp is a generic social network.
 *
 * API version: 1.0.0
 * Contact: ignacio.gomez.arboleda@gmail.com
 */

package openapi

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// UserAPIController binds http requests to an api service and writes the service results to the http response
type UserAPIController struct {
	service      UserAPIServicer
	errorHandler ErrorHandler
}

// UserAPIOption for how the controller is set up.
type UserAPIOption func(*UserAPIController)

// WithUserAPIErrorHandler inject ErrorHandler into controller
func WithUserAPIErrorHandler(h ErrorHandler) UserAPIOption {
	return func(c *UserAPIController) {
		c.errorHandler = h
	}
}

// NewUserAPIController creates a default api controller
func NewUserAPIController(s UserAPIServicer, opts ...UserAPIOption) *UserAPIController {
	controller := &UserAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UserAPIController
func (c *UserAPIController) Routes() Routes {
	return Routes{
		"ChangePassword": Route{
			strings.ToUpper("Post"),
			"/v1/password",
			c.ChangePassword,
		},
		"CreateUser": Route{
			strings.ToUpper("Post"),
			"/v1/users",
			c.CreateUser,
		},
		"DeleteUser": Route{
			strings.ToUpper("Delete"),
			"/v1/users/{username}",
			c.DeleteUser,
		},
		"FollowUser": Route{
			strings.ToUpper("Post"),
			"/v1/users/{followedUsername}/followers/{followerUsername}",
			c.FollowUser,
		},
		"GetFollowingUsers": Route{
			strings.ToUpper("Get"),
			"/v1/users/{username}/following",
			c.GetFollowingUsers,
		},
		"GetRolesForUser": Route{
			strings.ToUpper("Get"),
			"/v1/users/{username}/roles",
			c.GetRolesForUser,
		},
		"GetUserByUsername": Route{
			strings.ToUpper("Get"),
			"/v1/users/{username}",
			c.GetUserByUsername,
		},
		"GetUserComments": Route{
			strings.ToUpper("Get"),
			"/v1/users/{username}/comments",
			c.GetUserComments,
		},
		"GetUserFollowers": Route{
			strings.ToUpper("Get"),
			"/v1/users/{username}/followers",
			c.GetUserFollowers,
		},
		"ListUsers": Route{
			strings.ToUpper("Get"),
			"/v1/users",
			c.ListUsers,
		},
		"ResetPassword": Route{
			strings.ToUpper("Put"),
			"/v1/password",
			c.ResetPassword,
		},
		"UnfollowUser": Route{
			strings.ToUpper("Delete"),
			"/v1/users/{followedUsername}/followers/{followerUsername}",
			c.UnfollowUser,
		},
		"UpdateRolesForUser": Route{
			strings.ToUpper("Put"),
			"/v1/users/{username}/roles",
			c.UpdateRolesForUser,
		},
		"UpdateUser": Route{
			strings.ToUpper("Put"),
			"/v1/users/{username}",
			c.UpdateUser,
		},
	}
}

// ChangePassword - Change password
func (c *UserAPIController) ChangePassword(w http.ResponseWriter, r *http.Request) {
	changePasswordRequestParam := ChangePasswordRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&changePasswordRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertChangePasswordRequestRequired(changePasswordRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertChangePasswordRequestConstraints(changePasswordRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ChangePassword(r.Context(), changePasswordRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// CreateUser - Create user
func (c *UserAPIController) CreateUser(w http.ResponseWriter, r *http.Request) {
	createUserRequestParam := CreateUserRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createUserRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateUserRequestRequired(createUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateUserRequestConstraints(createUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateUser(r.Context(), createUserRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// DeleteUser - Deletes a particular user
func (c *UserAPIController) DeleteUser(w http.ResponseWriter, r *http.Request) {
	usernameParam := chi.URLParam(r, "username")
	if usernameParam == "" {
		c.errorHandler(w, r, &RequiredError{"username"}, nil)
		return
	}
	result, err := c.service.DeleteUser(r.Context(), usernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// FollowUser - Add a user as a follower
func (c *UserAPIController) FollowUser(w http.ResponseWriter, r *http.Request) {
	followedUsernameParam := chi.URLParam(r, "followedUsername")
	if followedUsernameParam == "" {
		c.errorHandler(w, r, &RequiredError{"followedUsername"}, nil)
		return
	}
	followerUsernameParam := chi.URLParam(r, "followerUsername")
	if followerUsernameParam == "" {
		c.errorHandler(w, r, &RequiredError{"followerUsername"}, nil)
		return
	}
	result, err := c.service.FollowUser(r.Context(), followedUsernameParam, followerUsernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetFollowingUsers - Get all followed users for a user
func (c *UserAPIController) GetFollowingUsers(w http.ResponseWriter, r *http.Request) {
	usernameParam := chi.URLParam(r, "username")
	if usernameParam == "" {
		c.errorHandler(w, r, &RequiredError{"username"}, nil)
		return
	}
	result, err := c.service.GetFollowingUsers(r.Context(), usernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetRolesForUser - Get all roles for a user
func (c *UserAPIController) GetRolesForUser(w http.ResponseWriter, r *http.Request) {
	usernameParam := chi.URLParam(r, "username")
	if usernameParam == "" {
		c.errorHandler(w, r, &RequiredError{"username"}, nil)
		return
	}
	result, err := c.service.GetRolesForUser(r.Context(), usernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserByUsername - Get a particular user by username
func (c *UserAPIController) GetUserByUsername(w http.ResponseWriter, r *http.Request) {
	usernameParam := chi.URLParam(r, "username")
	if usernameParam == "" {
		c.errorHandler(w, r, &RequiredError{"username"}, nil)
		return
	}
	result, err := c.service.GetUserByUsername(r.Context(), usernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserComments - Gets all comments for a user
func (c *UserAPIController) GetUserComments(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	usernameParam := chi.URLParam(r, "username")
	if usernameParam == "" {
		c.errorHandler(w, r, &RequiredError{"username"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](100),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "offset", Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	result, err := c.service.GetUserComments(r.Context(), usernameParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetUserFollowers - Get all followers for a user
func (c *UserAPIController) GetUserFollowers(w http.ResponseWriter, r *http.Request) {
	usernameParam := chi.URLParam(r, "username")
	if usernameParam == "" {
		c.errorHandler(w, r, &RequiredError{"username"}, nil)
		return
	}
	result, err := c.service.GetUserFollowers(r.Context(), usernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListUsers - List users
func (c *UserAPIController) ListUsers(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](100),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "offset", Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	result, err := c.service.ListUsers(r.Context(), limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ResetPassword - Reset password
func (c *UserAPIController) ResetPassword(w http.ResponseWriter, r *http.Request) {
	resetPasswordRequestParam := ResetPasswordRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&resetPasswordRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertResetPasswordRequestRequired(resetPasswordRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertResetPasswordRequestConstraints(resetPasswordRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ResetPassword(r.Context(), resetPasswordRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UnfollowUser - Remove a user as a follower
func (c *UserAPIController) UnfollowUser(w http.ResponseWriter, r *http.Request) {
	followedUsernameParam := chi.URLParam(r, "followedUsername")
	if followedUsernameParam == "" {
		c.errorHandler(w, r, &RequiredError{"followedUsername"}, nil)
		return
	}
	followerUsernameParam := chi.URLParam(r, "followerUsername")
	if followerUsernameParam == "" {
		c.errorHandler(w, r, &RequiredError{"followerUsername"}, nil)
		return
	}
	result, err := c.service.UnfollowUser(r.Context(), followedUsernameParam, followerUsernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateRolesForUser - Update all roles for a user
func (c *UserAPIController) UpdateRolesForUser(w http.ResponseWriter, r *http.Request) {
	usernameParam := chi.URLParam(r, "username")
	if usernameParam == "" {
		c.errorHandler(w, r, &RequiredError{"username"}, nil)
		return
	}
	requestBodyParam := []string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestBodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.UpdateRolesForUser(r.Context(), usernameParam, requestBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateUser - Update a user
func (c *UserAPIController) UpdateUser(w http.ResponseWriter, r *http.Request) {
	usernameParam := chi.URLParam(r, "username")
	if usernameParam == "" {
		c.errorHandler(w, r, &RequiredError{"username"}, nil)
		return
	}
	userParam := User{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserRequired(userParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserConstraints(userParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUser(r.Context(), usernameParam, userParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
