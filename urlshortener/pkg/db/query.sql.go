// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
)

const CreateURL = `-- name: CreateURL :one
INSERT INTO urls (alias, url)
VALUES ($1, $2)
RETURNING id, url, alias, created_at, updated_at, deleted_at
`

type CreateURLParams struct {
	Alias string `json:"alias"`
	Url   string `json:"url"`
}

func (q *Queries) CreateURL(ctx context.Context, db DBTX, arg CreateURLParams) (Url, error) {
	row := db.QueryRowContext(ctx, CreateURL, arg.Alias, arg.Url)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Alias,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const DeleteURL = `-- name: DeleteURL :exec
UPDATE urls
SET DELETED_AT = NOW()
WHERE alias = $1
	AND deleted_at IS NULL
`

func (q *Queries) DeleteURL(ctx context.Context, db DBTX, alias string) error {
	_, err := db.ExecContext(ctx, DeleteURL, alias)
	return err
}

const GetURLFromAlias = `-- name: GetURLFromAlias :one
SELECT id, url, alias, created_at, updated_at, deleted_at
FROM urls
WHERE alias = $1
	AND deleted_at IS NULL
LIMIT 1
`

// SHORTLY
func (q *Queries) GetURLFromAlias(ctx context.Context, db DBTX, alias string) (Url, error) {
	row := db.QueryRowContext(ctx, GetURLFromAlias, alias)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Alias,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
